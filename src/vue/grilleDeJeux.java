package vue;

import javax.swing.JPanel;

import modele.Jeux;
import java.awt.*;
import javax.swing.*;
import modele.occupant.*;
import modele.occupant.objetMobile.Hunter;
import modele.occupant.objetMobile.ObjetMobile;
import java.util.List;
import java.util.Random;
/**
 * The "grilleDeJeux" class creates a grid layout and populates it with panels that display images of
 * grass and occupants in a game.
 */
public class grilleDeJeux extends JPanel{
    private Jeux j;
    public grilleDeJeux(TexteAction t){
        super();
        Jeux j=new Jeux(t);
        this.setVisible(true);
        this.setPreferredSize(new Dimension(800,800));
        this.j=j;
    }

    /**
     * This Java function generates a random integer between a minimum and maximum value, inclusive.
     * 
     * @param min The minimum value that can be generated by the method.
     * @param max The maximum value that can be generated by the method.
     * @param seed The seed that will be used to generate the random number.
     * @return The method is returning an integer value that is randomly generated between the minimum
     * and maximum values provided as parameters.
     */
    public int generate(int min,int max, int seed){
        Random rand = new Random(System.currentTimeMillis());
        rand.setSeed(seed);
        int randomNum = rand.nextInt((max - min) + 1) + min;
        return randomNum;

    }

    /**
     * This function creates a grid layout and populates it with panels that display images of grass
     * and occupants in a game.
     */
    public void creeGrilleDeJeux(){
        this.setLayout(new GridLayout(j.getG().getMaxX(), j.getG().getMaxY()));

        for (int i = 0; i < j.getG().getMaxX(); i++) {
            for (int k = 0; k < j.getG().getMaxY(); k++) {
                final int rowIndex = i;
                final int colIndex = k;
                JPanel panel = new JPanel() {
                    @Override
                    protected void paintComponent(Graphics g) {
                        super.paintComponent(g);
                        
                        
                        // Dessiner l'image d'herbe en arrière-plan
                        int result = (rowIndex * j.getG().getMaxX()) + (colIndex );
                        ImageIcon grassIcon = new ImageIcon("src/vue/image/grass"+(generate(0,9,result))+".png");
                        Image grassImage = grassIcon.getImage();
                        g.drawImage(grassImage, 0, 0, getWidth(), getHeight(), this);

                        // Dessiner les occupants
                        List<Occupant> occupants = j.getG().getPos(new modele.Position(rowIndex, colIndex, j.getG().getMaxX()));
                        if (occupants != null) {
                            for (Occupant o : occupants) {
                                ImageIcon occupantIcon;
                                if(o instanceof Hunter){
                                    occupantIcon = new ImageIcon("src/vue/image/A.png");
                                }
                                else
                                {
                                    if(o instanceof modele.occupant.objetFixe.Border){
                                        occupantIcon = new ImageIcon("src/vue/image/▓"+(generate(0,4,result))+".png");
                                    }
                                    else{
                                        occupantIcon = new ImageIcon("src/vue/image/" + o.getRepresentation() + ".png");
                                    }
                                    
                                }

                                
                                Image occupantImage = occupantIcon.getImage();
                                g.drawImage(occupantImage, 0, 0, getWidth(), getHeight(), this);
                                if(o instanceof ObjetMobile){
                                    if(o instanceof Hunter){
                                        g.setColor(Color.WHITE);
                                        g.setFont(new Font("TimesRoman", Font.PLAIN, 30));
                                        g.drawString(""+o.getRepresentation(), 30, 30);
                                    }

                                    if(((ObjetMobile)o).isHavetool()){
                                        ImageIcon toolIcon = new ImageIcon("src/vue/image/tool.png");
                                        Image toolImage = toolIcon.getImage();
                                        g.drawImage(toolImage, 0, 0, getWidth(), getHeight(), this);
                                    }

                                    

                                }
                            }
                        }
                        


                    }
                };
                this.add(panel);
            }
        }
    }
    /**
     * This function updates the grid by repainting each panel in the grid.
     */
    public void updateGrid() {
        for (int i = 0; i < j.getG().getMaxX(); i++) {
            for (int k = 0; k < j.getG().getMaxY(); k++) {
                JPanel panel = (JPanel) this.getComponent(i * j.getG().getMaxX() + k);
                panel.repaint();
            }
        }
    }


    /**
     * @return Jeux return the j
     */
    public Jeux getJ() {
        return j;
    }

    /**
     * @param j the j to set
     */
    public void setJ(Jeux j) {
        this.j = j;
    }

}
